*조회
SELECT 속성
FROM 테이블명
WHERE 조건;

조회를 할뿐, 테이블이 변경되지 않음

*조회 관련 함수들

단일 행 함수 vs 그룹함수
단일 행 함수는 한 번에 하나의 데이터를 처리하는 함수, 반면 그룹함수는 여러 건의 데이터를
동시에 처리하여 해당 그룹에 해당하는 결과를 반환.
그룹함수는 주로 요약된 정보를 출력해야 할때 유용

LOWER : 소문자로 변경해서 조회
UPPER : 대문자로 조회
INITCAP : 첫문자를 대문자로 변환
SUBSTR('열이름',시작,끝) : 문자열을 지정한 길이만큼 출력
REPLACE('열이름',바꿀문자열,바꾼문자열)
LPAD('열이름',만들어질 자릿수(전체자리수),'채워질 문자')
LPAD: 왼쪽부터 특정문자로 자릿수를 채우는 함수
RPAD: 오른쪽부터 특정문자로 자릿수를 채우는 함수
LTRIM, RTRIM('열이름',제거할 문자) : 특정 문자를 제거하기 위한 함수
왼쪽     오른쪽
TRIM('문자열'or 열이름) : 불필요한 공백을 제거하는데 사용, 단, 문자열 사이의 공백은 제거가 안됨
 cf) FROM dual -> dual 테이블이란? 더미라는 하나의 열과 하나의 'X' 데이터 값을 갖고 있는 테이블
                       X는 임의의 값 사용자가 출력하고싶은 데이터를 의미. 결국, 임의의 문자나 날짜를 
                       알고싶을때 특정 테이블을 참조하지 않고 그냥 출력하는데 쓰임

*숫자타입 함수들

ROUND(숫자,소수점자리수) : ROUND는 지정한 자리에서 반올림하는 함수, 0은 소숫점 첫째자리 앞
 cf) 조회시 열 이름 설정할 때 AS를 쓰는데 생략이 가능하다는 걸 인지
TRUNC(숫자or 열이름,절삭할 자리 값) : 버림

*날짜 타입 함수

SYSDATE는 오라클 데이터베이스 시스템이 설치되어 있는 시스템의 현재 날짜와 시간을 반환하는 함수

SELECT TO_CHAR(SYSDATE,'YY/MM/DD/HH24:MI') 오늘날짜, //TO_CHAR는 날짜형식을 문자형식으로 변환해줌
SYSDATE +1 더하기1, 
SYSDATE -1 빼기1,
TO_DATE(20200303)-TO_DATE(20200301) 날짜빼기, 
SYSDATE + 13/24 시간더하기
FROM employees;

MONTHS_BETWEEN(날짜,날짜) : 날짜 사이의 일수를 반환
ADD_MONTHS(날짜,더할 개월수) : 개월수만큼 플러스
NEXT_DAY(날짜, 요일or 숫자) :돌아오는 요일의 날짜를 출력 (숫자 입력시 1은 일요일 ~7은 토요일이됨)
LAST_DAY(날짜) : 월의 마지막 날짜 출력

날짜 타입함수에서 ROUND TRUNC함수의 쓰임
ROUND(날짜,'MONTH') 일수가 15일을 넘었다면 다음달 1일로 올림, 넘지 않았다면 그달 1일로 반올림됨
ROUND(날짜,'YEAR') 마찬가지로 달 수가 6월을 기준으로 반올림
TRUNC는 무조건 내림

*변환함수
오라클 데이터베이스 시스템은 각 열에 대해 하나의 데이터 타입을 가지고 있음.
그렇기 때문에 SQL 문을 실행하기 위해 데이터 값의 데이터 타입을 변환해야 할 때도 있음.
(즉, C언어의 캐스팅과 비슷한 내용) 종류로는 자동 데이터 타입 변환과 수동 데이터 타입변환이 있음.

1)자동 데이터 타입 변환
오라클 데이터베이스 시스템에서 특정한 경우 데이터 타입을 자동으로 변환
예) VARCHAR2 타입에 입력되어 있는 100은 NUMBER타입으로 자동 변환되어 산술 계산될 수 있음.
 반대로 100은 VARCHAR2 타입으로 자동 변환되어 저장될 수 있음.
 VARCHAR2 -> DATE도 가능

2)수동 데이터 타입 변환(SQL문의 성능과 안정성을 위해 권장!!)
TO_CHAR : 숫자, 문자, 날짜 값을 지정 형식의 VARCHAR2 타입으로 변환
TO_NUMBER : 문자를 숫자 타입으로 변환
TO_DATE : 날짜를 나타내는 문자열을 지정 형식의 날짜 타입으로 변환

TO_CHAR(SYSDATE,'YYYYMMDD HH:MI:SS PM')
FROM dual;

3)숫자 형식 변환하기
TO_CHAR(숫자타입,'99999999') ->9로 형식을 지정 9는 자릿수 결정
TO_CHAR(숫자타입,'09999999') ->나머지를 0으로 채움
TO_CHAR(숫자타입,'L9999999') -> 원화 표시, 맨 뒤에 L을 붙여도됨
TO_CHAR(숫자타입,'99,999,999) -> ,표시

*일반 함수
1)NVL(열이름, 변환할 값) : NULL값을 가지고 있는 항목을 다른 데이터로 변환하는 함수

SELECT salary * NVL(commission_pct,1)
FROM emlployees
ORDER BY commission_pct //DESC 나 ASC로 명시 안해줬을 경우 자동으로 ASC 오름차순!
--------------------------------------------------------------------------------------------sql 118페이지까지

***2)DECODE(열 이름, 조건 값, 치환 값, 기본값) : 조건 값과 비교하여 같으면 치환 값, 틀리면 기본값으로 치환
SELECT first_name, last_name, department_id, salary 원래급여,
       DECODE(department_id,60, salary*1.1,salary) 조정된급여,
       DECODE(department_id,60, '10%인상','미인상') 인상여부
FROM employees;

DECODE(열이름,조건값1, 치환값1,조건ㄱ밧2,치환값2,....,기본값) 형태로 조건 논리를 계속 이어 나갈 수 있음.

3) CASE ~WHEN ~THEN ~END AS 열이름 : 조건범위가 광범위한경우 DECODE 말고 CASE문 사용 
SELECT employee_id, first_name, last_name,salary,
    CASE 
        WHEN salary >= 9000 THEN '상위급여'
        WHEN salary BETWEEN 6000 AND 8999 THEN '중위급여'
        ELSE '실업급여'
        END AS 급여등급
FROM employees
WHERE job_id = 'IT_PROG';
(verilog와 비슷하다고 느낌)

4)RANK, DENSE_RANK, ROW_NUMBER :데이터 값에 순위 매기기
SELECT employee_id,salary,
    RANK() OVER(ORDER BY salary DESC) RANK_급여,
    DENSE_RANK() OVER(ORDER BY salary DESC) DENSE_RANK_급여,
    ROW_NUMBER() OVER(ORDER BY salary DESC) ROW_NUMBER_급여
FROM employees;

RANK 함수는 공동 순위를 뛰어넘음  1등 2등 2등 4등
DENSE_RANK 함수는 공동순위를 뛰어넘지 않음   1등 2등 2등 3등
ROW_NUMBER 함수는 공동순위가 없음 1등 2등 3등 4등   

PARTITION BY 열이름 -> 같은 속성끼리 묶임

SELECT A.employee_id, A.department_id,B.department_name, salary,
       RANK() OVER(PARTITION BY A.department_id ORDER BY salary DESC) RANK_급여,
       DENSE_RANK() OVER(PARTITION BY A.department_id ORDER BY salary DESC) DENSE_RANK_급여,
       ROW_NUMBER() OVER(PARTITION BY A.department_id ORDER BY salary DESC) ROW_NUMBER_급여
    FROM employees A,departments B    //프로그래밍에서 인스턴스 생성과 같은느낌? 새로운 테이블에 복사하는 원리인지 잘모르겠다...
    WHERE A.department_id = B.department_id
    ORDER BY B.department_id, A.salary DESC;   
---------------------------------------------------------------sql 124페이지까지

*집계함수(COUNT,SUM,AVG,MAX,MIN,STDDEV...)
COUNT(salary) : 총 행의 갯수
SUM(salary) : 총 데이터값
cf) 보통 NULL값은 제외되는데 포함시키고자 한다면 NVL(salary,0) 형태로 연산
AVG(salary) : 데이터 평균
ROUNT(AVG(salary),1) : 소숫점 두번째자리에서 반올림

