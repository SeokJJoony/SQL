*패밀리 레스토랑의 현재 상황
1)서울 곳곳에 패밀리 레스토랑 지점을 운영중이다.
2)주로 오프라인과 가족 고객 위주로 매출 활동을 해 왔다.
3)최분석 과장은 디지털 마케팅의 중요성을 인지한 후 판매 활성화를 위해 온라인 에약 시스템 개편과 함께
온라인 예약 전용 메뉴 상품(이하 전용 상품)을 기획하여 출시했다. 전용 상품은 오프라인에서 예약할 수 없고
홈페이지와 앱 등 온라인에서만 예약 가능한 메뉴이다. 기존 상품도 온라인 예약은 가능하다.
4)서울의 모든 지점에서 전용 상품을 서비스했고, 전용 상품의 서비스 기간은 2017년 6월~2017년 12월 31일까지
총 7개월이다.

*데이터베이스ERD
1)고객 정보, 주소 정보, 예약 정보, 주문 정보, 상품 정보 총 5개의 테이블로 구성됨
2)주소는 고객을 여러 건 갖는다. 주소가 없어도 고객은 존재
3)고객은 에약을 여러 건 갖는다. 고객 없이는 예약이 존재할 수 없다.
예약할 때는 customer_id가 필수다.
4)예약은 주문을 여러 건 갖는다. 상품이 없다면 주문은 존재할 수 없다.

결론: 고객정보를 필수로 하는 예약 정보가 있어야 함. 예약 정보는 주문 정보를 여러개 가질 수 있음.
       주문 정보의 주문 번호는 상품 번호와 합쳐저 복합키로 구성되어 있음. 즉, 주문 번호는 중복 없는
       상품 번호를 여러 개 갖음.

고객정보 - 예약정보 - 주문정보 (왼쪽으로 갈수록 상위)

*매출 분석하기
가장 기본으로 전체 품의 주문 완료 건, 총 매출,평균 매출,최고 매출,최저 매출 확인하기

SELECT COUNT(*) 전체주문건,SUM(B.sales) 총매출,AVG(B.sales) 평균매출,MAX(B.sales) 최고매출,MIN(B.sales) 최저매출
FROM reservation A,order_info B
WHERE A.reserv_no = B.reserv_no; //주문 완료 된 건만

전반적인 매출을 분석함
이제 온라인으로만 예약할 수 있는 상품의 판매량을 분석해보자

SELECT COUNT(*), SUM(B.sales),SUM(DECODE(B.item_id,'M0001',1,0)),SUM(DECODE(B.item_id,'M0001',B.sales,0))
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no AND A.cancel = 'N'

상품코드 M0001은 온라인 전용 판매 상품, 따라서 M0001 상품의 판매량과 매출액을 계산하였음

*그룹화 분석: 상품별 매출 계산 및 순서 정렬

SELECT C.item_id 상품코드,C.product_name 상품이름,SUM(B.sales) 상품매출
FROM reservation A,order_info B,item C
WHERE A.reserv_no = B.reserv_no AND B.item_id = C.item_id  AND A.cancel ='N'
GROUP BY C.item_id, C.product_name
ORDER BY SUM(B.sales) DESC;

전체적인 상품에 대한 정보가 있는 ITEM 테이블에서 상품 코드와 상품이름을 그룹화해서 조인
그리고 상품별 판매량을 ORDER_INFO 테이블에서 조인
주문된 건을 조회해야 하므로 RESERVATION 테이블의 예약번호와 같은 주문테이블의 예약번호 수집
주문된 상품을 조회해야 하므로 ORDER_INFO 테이블의 상품코드와 같은 ITEM테이블의 상품코드 조회

*시계열 분석: 월별 상품 매출 분석

SELECT SUBSTR(a.reserv_date,1,6) 매출월,
       SUM(DECODE(B.item_id,'M0001',B.sales,0)) SPECIAL_SET,
       SUM(DECODE(B.item_id,'M0002',B.sales,0)) PASTA,
       SUM(DECODE(B.item_id,'M0003',B.sales,0)) PIZZA,
       SUM(DECODE(B.item_id,'M0004',B.sales,0)) SEA_FOOD,
       SUM(DECODE(B.item_id,'M0005',B.sales,0)) STEAK,
       SUM(DECODE(B.item_id,'M0006',B.sales,0)) SALAD_BAR,
       SUM(DECODE(B.item_id,'M0007',B.sales,0)) SALAD,
       SUM(DECODE(B.item_id,'M0008',B.sales,0)) SANDWICH,
       SUM(DECODE(B.item_id,'M0009i',B.sales,0)) WINE,
       SUM(DECODE(B.item_id,'M0010',B.sales,0)) JUICE
FROM reservation A,order_info B,item C
WHERE A.reserv_no = B.reserv_no AND A.cancel = 'N'
GROUP BY SUBSTR(reserv_date,1,6)
ORDER BY SUBSTR(reserv_date,1,6) ASC;

SUBSTR 함수로 월까지 출력

*월별 총 매출과 온라인 전용 상품 매출 비교

SELECT SUBSTR(A.reserv_date,1,6) 날짜,SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출 
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no AND A.cancel = 'N'
GROUP BY SUBSTR(A.reserv_date,1,6)
ORDER BY SUBSTR(A.reserv_date,1,6);

*온라인 전용 상품 기여도 분석

SELECT SUBSTR(A.reserv_date,1,6) 날짜,
          SUM(B.sales)-SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품외매출,
          SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출,
          ROUND(SUM(DECODE(B.item_id,'M0001',B.sales,0))/SUM(B.sales)*100,1) 전용상품기여도
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no AND A.cancel = 'N'
GROUP BY SUBSTR(A.reserv_date,1,6)
ORDER BY SUBSTR(A.reserv_date,1,6);

*예약 취소건 분석

SELECT SUBSTR(A.reserv_date,1,6) 날짜,SUM(B.sales)-SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품외매출,
       SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출,ROUND(SUM(DECODE(B.item_id,'M0001',B.sales,0))/SUM(B.sales)*100,1) 전용상품기여도,
       COUNT(A.reserv_no) 총예약건,
       SUM(DECODE(A.cancel,'N',1,0)) 예약건수,
       SUM(DECODE(A.cancel,'Y',1,0)) 예약취소건수
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no --AND A.cancel = 'N'
GROUP BY SUBSTR(A.reserv_date,1,6)
ORDER BY SUBSTR(A.reserv_date,1,6);

**오류 예약 테이블에 있는 예약넘버가 실제 주문 데이터인 주문테이블에 없을 수도 있음
 여기서 중요한건 예약을 했으나 레스토랑에 오지않아서 주문테이블에는 없는 경우가 있음
 그런 경우가 취소한 고객임 그렇기 때문에 예약테이블에는 있으나 주문테이블에 없는 예약정보를 카운트해야함
 외부 조인을 사용하여 없는 데이터는 NULL로 처리 
 
SELECT SUBSTR(A.reserv_date,1,6) 날짜,SUM(B.sales)-SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품외매출,
       SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출,ROUND(SUM(DECODE(B.item_id,'M0001',B.sales,0))/SUM(B.sales)*100,1) 전용상품기여도,
       COUNT(A.reserv_no) 총예약건,
       SUM(DECODE(A.cancel,'N',1,0)) 예약건수,
       SUM(DECODE(A.cancel,'Y',1,0)) 예약취소건수
FROM reservation A, order_info B
WHERE A.reserv_no = B.reserv_no(+) --AND A.cancel = 'N'  //데이터가 부족한쪽에(+)를 달아 외부조인함 --는 sql 주석처리
GROUP BY SUBSTR(A.reserv_date,1,6)
ORDER BY SUBSTR(A.reserv_date,1,6);

*날짜 처리하기(월별 전용 상품 매출액을 일요일부터 월요일까지 구분해 출력)

SELECT SUBSTR(A.reserv_date,1,6),
       A.product_name 상품명,
       SUM(DECODE(A.WEEK,'1',A.sales,0)) 일요일,
       SUM(DECODE(A.WEEK,'2',A.sales,0)) 월요일,
       SUM(DECODE(A.WEEK,'3',A.sales,0)) 화요일,
       SUM(DECODE(A.WEEK,'4',A.sales,0)) 수요일,
       SUM(DECODE(A.WEEK,'5',A.sales,0)) 목요일,
       SUM(DECODE(A.WEEK,'6',A.sales,0)) 금요일,
       SUM(DECODE(A.WEEK,'7',A.sales,0)) 토요일
FROM (  SELECT A.reserv_date,
        C.product_name,
        TO_CHAR(TO_DATE(A.reserv_date,'YYYYMMDD'),'d') WEEK,
        B.sales
        FROM reservation A,order_info B,item C
        WHERE A.reserv_no=B.reserv_no AND B.item_id=C.item_id AND B.item_id = 'M0001'
        ) A  
GROUP BY SUBSTR(A.reserv_date,1,6),A.product_name
ORDER BY SUBSTR(A.reserv_date,1,6);
 
A라는 인라인뷰를 생성, 뷰를 활용하여 요일 추출(테이블의 날짜 데이터는 텍스트 형식이므로 날짜형식으로 변환 후, 7일단위로
변환 0:일요일 1:월요일 ....)

*월별 매출 실적이 가장 높은 지점 출력
SELECT *
FROM
	(SELECT SUBSTR(A.reserv_date,1,6) 날짜,
       	          A.branch 지점,
       	          SUM(B.sales) 총판매량,
       	          RANK() OVER(PARTITION BY SUBSTR(A.reserv_date,1,6) ORDER BY SUM(B.sales) DESC) 지점순위
	FROM reservation A,order_info B
	WHERE A.reserv_no = B.reserv_no AND A.cancel ='N' AND B.item_id ='M0001'
	GROUP BY SUBSTR(A.reserv_date,1,6), A.branch
	ORDER BY SUBSTR(A.reserv_date,1,6)) A
WHERE A.지점순위<=3; 

*최종리포트(전용상품 기여도 및 가장 높은 매출을 일으킨 지점)
SELECT A.매출월 매출월,
       MAX(총매출) 총매출,
       MAX(전용상품외매출) 전용상품외매출,
       MAX(전용상품매출) 전용상품매출,
       MAX(전용상품판매율) 전용상품판매율,
       MAX(총예약건) 총예약건,
       MAX(예약완료건) 예약완료건,
       MAX(예약취소건) 예약취소건,
       MAX(예약취소율) 예약취소율,
       MAX(최대매출지점) 최대매출지점,
       MAX(지점매출액) 지점매출액
FROM 
(
    SELECT SUBSTR(A.reserv_date,1,6) 매출월,
           SUM(B.sales) 총매출,
           SUM(B.sales) - SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품외매출,
           SUM(DECODE(B.item_id,'M0001',B.sales,0)) 전용상품매출,
           ROUND(SUM(DECODE(B.item_id,'M0001',B.sales,0))/SUM(B.sales)*100,1) || '%' 전용상품판매율,
           COUNT(A.reserv_no) 총예약건,
           SUM(DECODE(A.cancel,'N',1,0)) 예약완료건,
           SUM(DECODE(A.cancel,'Y',1,0)) 예약취소건,
           SUM(DECODE(A.cancel,'Y',1,0))/COUNT(A.reserv_no)*100 || '%' 예약취소율,
           '' 최대매출지점,
           0 지점매출액
    FROM reservation A, order_info B
    WHERE A.reserv_no=B.reserv_no
    GROUP BY SUBSTR(A.reserv_date,1,6),'',0
UNION
    SELECT A.매출월,
    0 총매출,
    0 전용상품외매출,
    0 전용상품매출,
    '' 전용상품판매율,
    0 총예약건,
    0 예약완료건,
    0 예약취소건,
    '' 예약취소율,
    A.지점 최대매출지점,
    A.전용상품매출 지점매출액
    FROM 
    (
        SELECT SUBSTR(A.reserv_date,1,6) 매출월,
               A.branch 지점,
               SUM(B.sales) 전용상품매출,
               ROW_NUMBER() OVER(PARTITION BY SUBSTR(A.reserv_date,1,6) ORDER BY SUM(B.sales) DESC) 지점순위,
               DECODE(A.branch,'강남','A','종로','A','영등포','A','B') 지점등급
        FROM reservation A,order_info B
        WHERE A.reserv_no = B.reserv_no AND A.cancel ='N' AND B.item_id ='M0001'
        GROUP BY SUBSTR(A.reserv_date,1,6),A.branch, DECODE(A.branch,'강남','A','종로','A','영등포','A','B')
        ORDER BY SUBSTR(A.reserv_date,1,6)
        ) A
    WHERE 지점순위 = 1
    ) A
GROUP BY A.매출월
ORDER BY A.매출월;     

**두개의 테이블을 만들기 위해 더미열을 생성함 문자열은 '' 숫자는 0으로 초기화 시킨 후 데이터를 합침
 최종조회 시 더미 값 말고 실제 데이터를 조회하기위해 MAX함수를 써줌
 여기서 문자는 아스키코드 체계의 데이터이므로 MAX함수가 적용됨